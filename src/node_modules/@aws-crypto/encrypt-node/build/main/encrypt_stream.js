"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEncryptionInfo = exports._encryptStream = void 0;
const material_management_node_1 = require("@aws-crypto/material-management-node");
const framed_encrypt_stream_1 = require("./framed_encrypt_stream");
const signature_stream_1 = require("./signature_stream");
const duplexify_1 = __importDefault(require("duplexify"));
const crypto_1 = require("crypto");
const serialize_1 = require("@aws-crypto/serialize");
// @ts-ignore
const readable_stream_1 = require("readable-stream");
const fromUtf8 = (input) => Buffer.from(input, 'utf8');
const { serializeMessageHeader, headerAuthIv, buildMessageHeader, } = serialize_1.serializeFactory(fromUtf8);
/**
 * Takes a NodeDefaultCryptographicMaterialsManager or a KeyringNode that will
 * be wrapped in a NodeDefaultCryptographicMaterialsManager and returns a stream.
 *
 * @param commitmentPolicy
 * @param cmm NodeMaterialsManager|KeyringNode
 * @param op EncryptStreamInput
 */
function _encryptStream({ commitmentPolicy, maxEncryptedDataKeys }, cmm, op = {}) {
    /* Precondition: encryptStream needs a valid commitmentPolicy. */
    material_management_node_1.needs(material_management_node_1.CommitmentPolicy[commitmentPolicy], 'Invalid commitment policy.');
    // buildEncrypt defaults this to false for backwards compatibility, so this is satisfied
    /* Precondition: encryptStream needs a valid maxEncryptedDataKeys. */
    material_management_node_1.needs(maxEncryptedDataKeys === false || maxEncryptedDataKeys >= 1, 'Invalid maxEncryptedDataKeys value.');
    const { suiteId, encryptionContext = {}, frameLength = serialize_1.FRAME_LENGTH, plaintextLength, } = op;
    /* Precondition: The frameLength must be less than the maximum frame size Node.js stream. */
    material_management_node_1.needs(frameLength > 0 && serialize_1.Maximum.FRAME_SIZE >= frameLength, `frameLength out of bounds: 0 > frameLength >= ${serialize_1.Maximum.FRAME_SIZE}`);
    /* If the cmm is a Keyring, wrap it with NodeDefaultCryptographicMaterialsManager. */
    cmm =
        cmm instanceof material_management_node_1.KeyringNode
            ? new material_management_node_1.NodeDefaultCryptographicMaterialsManager(cmm)
            : cmm;
    const suite = suiteId && new material_management_node_1.NodeAlgorithmSuite(suiteId);
    /* Precondition: Only request NodeEncryptionMaterial for algorithm suites supported in commitmentPolicy. */
    material_management_node_1.CommitmentPolicySuites.isEncryptEnabled(commitmentPolicy, suite);
    const wrappingStream = new duplexify_1.default();
    cmm
        .getEncryptionMaterials({
        suite,
        encryptionContext,
        plaintextLength,
        commitmentPolicy,
    })
        .then(async (material) => {
        /* Precondition: Only use NodeEncryptionMaterial for algorithm suites supported in commitmentPolicy. */
        material_management_node_1.CommitmentPolicySuites.isEncryptEnabled(commitmentPolicy, material.suite);
        /* Precondition: _encryptStream encryption materials must not exceed maxEncryptedDataKeys */
        material_management_node_1.needs(maxEncryptedDataKeys === false ||
            material.encryptedDataKeys.length <= maxEncryptedDataKeys, 'maxEncryptedDataKeys exceeded.');
        const { getCipher, messageHeader, rawHeader, dispose, getSigner, } = getEncryptionInfo(material, frameLength);
        wrappingStream.emit('MessageHeader', messageHeader);
        const encryptStream = framed_encrypt_stream_1.getFramedEncryptStream(getCipher, messageHeader, dispose, { plaintextLength, suite: material.suite });
        const signatureStream = new signature_stream_1.SignatureStream(getSigner);
        readable_stream_1.pipeline(encryptStream, signatureStream);
        wrappingStream.setReadable(signatureStream);
        // Flush the rawHeader through the signatureStream
        rawHeader.forEach((buff) => signatureStream.write(buff));
        // @ts-ignore until readable-stream exports v3 types...
        wrappingStream.setWritable(encryptStream);
    })
        .catch((err) => wrappingStream.emit('error', err));
    return wrappingStream;
}
exports._encryptStream = _encryptStream;
function getEncryptionInfo(material, frameLength) {
    const { getCipherInfo, dispose, getSigner } = material_management_node_1.getEncryptHelper(material);
    const { suite, encryptionContext, encryptedDataKeys } = material;
    const { ivLength, messageFormat } = material.suite;
    const versionString = material_management_node_1.MessageFormat[messageFormat];
    const messageIdLength = parseInt(serialize_1.MessageIdLength[versionString], 10);
    /* Precondition UNTESTED: Node suites must result is some messageIdLength. */
    material_management_node_1.needs(messageIdLength > 0, 'Algorithm suite has unknown message format.');
    const messageId = crypto_1.randomBytes(messageIdLength);
    const { getCipher, keyCommitment } = getCipherInfo(messageId);
    const messageHeader = buildMessageHeader({
        suite: suite,
        encryptedDataKeys,
        encryptionContext,
        messageId,
        frameLength,
        suiteData: keyCommitment,
    });
    const { buffer, byteOffset, byteLength } = serializeMessageHeader(messageHeader);
    const headerBuffer = Buffer.from(buffer, byteOffset, byteLength);
    const headerIv = headerAuthIv(ivLength);
    const validateHeader = getCipher(headerIv);
    validateHeader.setAAD(headerBuffer);
    validateHeader.update(Buffer.alloc(0));
    validateHeader.final();
    const headerAuthTag = validateHeader.getAuthTag();
    return {
        getCipher,
        dispose,
        getSigner,
        messageHeader,
        rawHeader: [
            headerBuffer,
            serialize_1.serializeMessageHeaderAuth({ headerIv, headerAuthTag, messageHeader }),
        ],
    };
}
exports.getEncryptionInfo = getEncryptionInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdF9zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5jcnlwdF9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7Ozs7OztBQUV0QyxtRkFjNkM7QUFDN0MsbUVBQWdFO0FBQ2hFLHlEQUFvRDtBQUNwRCwwREFBaUM7QUFDakMsbUNBQW9DO0FBQ3BDLHFEQU04QjtBQUU5QixhQUFhO0FBQ2IscURBQTBDO0FBRzFDLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUM5RCxNQUFNLEVBQ0osc0JBQXNCLEVBQ3RCLFlBQVksRUFDWixrQkFBa0IsR0FDbkIsR0FBRyw0QkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQVM5Qjs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsY0FBYyxDQUM1QixFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFpQixFQUN6RCxHQUF1QyxFQUN2QyxLQUF5QixFQUFFO0lBRTNCLGlFQUFpRTtJQUNqRSxnQ0FBSyxDQUFDLDJDQUFnQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtJQUV2RSx3RkFBd0Y7SUFDeEYscUVBQXFFO0lBQ3JFLGdDQUFLLENBQ0gsb0JBQW9CLEtBQUssS0FBSyxJQUFJLG9CQUFvQixJQUFJLENBQUMsRUFDM0QscUNBQXFDLENBQ3RDLENBQUE7SUFFRCxNQUFNLEVBQ0osT0FBTyxFQUNQLGlCQUFpQixHQUFHLEVBQUUsRUFDdEIsV0FBVyxHQUFHLHdCQUFZLEVBQzFCLGVBQWUsR0FDaEIsR0FBRyxFQUFFLENBQUE7SUFFTiw0RkFBNEY7SUFDNUYsZ0NBQUssQ0FDSCxXQUFXLEdBQUcsQ0FBQyxJQUFJLG1CQUFPLENBQUMsVUFBVSxJQUFJLFdBQVcsRUFDcEQsaURBQWlELG1CQUFPLENB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