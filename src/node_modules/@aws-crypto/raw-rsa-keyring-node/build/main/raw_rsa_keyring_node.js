"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawRsaKeyringNode = void 0;
const material_management_node_1 = require("@aws-crypto/material-management-node");
const crypto_1 = require("crypto");
const raw_keyring_1 = require("@aws-crypto/raw-keyring");
const oaep_hash_supported_1 = require("./oaep_hash_supported");
const supportedOaepHash = [
    'sha1',
    'sha256',
    'sha384',
    'sha512',
    undefined,
];
class RawRsaKeyringNode extends material_management_node_1.KeyringNode {
    constructor(input) {
        super();
        this._onEncrypt = raw_keyring_1._onEncrypt(randomBytesAsync);
        this._onDecrypt = raw_keyring_1._onDecrypt();
        const { rsaKey, keyName, keyNamespace, padding = crypto_1.constants.RSA_PKCS1_OAEP_PADDING, oaepHash, } = input;
        const { publicKey, privateKey } = rsaKey;
        /* Precondition: RsaKeyringNode needs either a public or a private key to operate. */
        material_management_node_1.needs(publicKey || privateKey, 'No Key provided.');
        /* Precondition: RsaKeyringNode needs identifying information for encrypt and decrypt. */
        material_management_node_1.needs(keyName && keyNamespace, 'Identifying information must be defined.');
        /* Precondition: The AWS ESDK only supports specific hash values for OAEP padding. */
        material_management_node_1.needs(padding === crypto_1.constants.RSA_PKCS1_OAEP_PADDING
            ? oaep_hash_supported_1.oaepHashSupported
                ? supportedOaepHash.includes(oaepHash)
                : !oaepHash || oaepHash === 'sha1'
            : !oaepHash, 'Unsupported oaepHash');
        const _wrapKey = async (material) => {
            /* Precondition: Public key must be defined to support encrypt. */
            if (!publicKey)
                throw new Error('No public key defined in constructor.  Encrypt disabled.');
            const { buffer, byteOffset, byteLength } = material_management_node_1.unwrapDataKey(material.getUnencryptedDataKey());
            const encryptedDataKey = crypto_1.publicEncrypt({ key: publicKey, padding, oaepHash }, Buffer.from(buffer, byteOffset, byteLength));
            const providerInfo = this.keyName;
            const providerId = this.keyNamespace;
            const flag = material_management_node_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY;
            const edk = new material_management_node_1.EncryptedDataKey({
                encryptedDataKey,
                providerInfo,
                providerId,
            });
            return material.addEncryptedDataKey(edk, flag);
        };
        const _unwrapKey = async (material, edk) => {
            /* Precondition: Private key must be defined to support decrypt. */
            if (!privateKey)
                throw new Error('No private key defined in constructor.  Decrypt disabled.');
            const trace = {
                keyName: this.keyName,
                keyNamespace: this.keyNamespace,
                flags: material_management_node_1.KeyringTraceFlag.WRAPPING_KEY_DECRYPTED_DATA_KEY,
            };
            const { buffer, byteOffset, byteLength } = edk.encryptedDataKey;
            const encryptedDataKey = Buffer.from(buffer, byteOffset, byteLength);
            const unencryptedDataKey = crypto_1.privateDecrypt({ key: privateKey, padding, oaepHash }, encryptedDataKey);
            return material.setUnencryptedDataKey(unencryptedDataKey, trace);
        };
        material_management_node_1.readOnlyProperty(this, 'keyName', keyName);
        material_management_node_1.readOnlyProperty(this, 'keyNamespace', keyNamespace);
        material_management_node_1.readOnlyProperty(this, '_wrapKey', _wrapKey);
        material_management_node_1.readOnlyProperty(this, '_unwrapKey', _unwrapKey);
    }
    _filter({ providerId, providerInfo }) {
        const { keyNamespace, keyName } = this;
        return providerId === keyNamespace && providerInfo === keyName;
    }
}
exports.RawRsaKeyringNode = RawRsaKeyringNode;
material_management_node_1.immutableClass(RawRsaKeyringNode);
async function randomBytesAsync(size) {
    return new Promise((resolve, reject) => {
        crypto_1.randomBytes(size, (err, buffer) => {
            if (err)
                return reject(err);
            resolve(buffer);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X3JzYV9rZXlyaW5nX25vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmF3X3JzYV9rZXlyaW5nX25vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUV0QyxtRkFhNkM7QUFFN0MsbUNBT2U7QUFFZix5REFLZ0M7QUFFaEMsK0RBQXlEO0FBa0J6RCxNQUFNLGlCQUFpQixHQUFlO0lBQ3BDLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0NBQ1YsQ0FBQTtBQVVELE1BQWEsaUJBQWtCLFNBQVEsc0NBQVc7SUFNaEQsWUFBWSxLQUE2QjtRQUN2QyxLQUFLLEVBQUUsQ0FBQTtRQW9GVCxlQUFVLEdBQUcsd0JBQVUsQ0FDckIsZ0JBQWdCLENBQ2pCLENBQUE7UUFDRCxlQUFVLEdBQUcsd0JBQVUsRUFBeUMsQ0FBQTtRQXJGOUQsTUFBTSxFQUNKLE1BQU0sRUFDTixPQUFPLEVBQ1AsWUFBWSxFQUNaLE9BQU8sR0FBRyxrQkFBUyxDQUFDLHNCQUFzQixFQUMxQyxRQUFRLEdBQ1QsR0FBRyxLQUFLLENBQUE7UUFDVCxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUN4QyxxRkFBcUY7UUFDckYsZ0NBQUssQ0FBQyxTQUFTLElBQUksVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUE7UUFDbEQseUZBQXlGO1FBQ3pGLGdDQUFLLENBQUMsT0FBTyxJQUFJLFlBQVksRUFBRSwwQ0FBMEMsQ0FBQyxDQUFBO1FBQzFFLHFGQUFxRjtRQUNyRixnQ0FBSyxDQUNILE9BQU8sS0FBSyxrQkFBUyxDQUFDLHNCQUFzQjtZQUMxQyxDQUFDLENBQUMsdUNBQWlCO2dCQUNqQixDQUFDLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztnQkFDdEMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsS0FB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