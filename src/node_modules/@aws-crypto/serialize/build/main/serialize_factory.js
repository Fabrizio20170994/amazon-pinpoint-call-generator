"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeMessageHeaderAuth = exports.serializeFactory = void 0;
/*
 * This public interface for serializing the AWS Encryption SDK Message Header Format
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-structure
 */
const concat_buffers_1 = require("./concat_buffers");
const material_management_1 = require("@aws-crypto/material-management");
const identifiers_1 = require("./identifiers");
const uint_util_1 = require("./uint_util");
function serializeFactory(fromUtf8) {
    return {
        frameIv,
        nonFramedBodyIv,
        headerAuthIv,
        frameHeader,
        finalFrameHeader,
        encodeEncryptionContext,
        serializeEncryptionContext,
        serializeEncryptedDataKeys,
        serializeEncryptedDataKey,
        serializeMessageHeader,
        buildMessageHeader,
    };
    function frameIv(ivLength, sequenceNumber) {
        /* Precondition: sequenceNumber must conform to the specification. i.e. 1 - (2^32 - 1)
         * The sequence number starts at 1
         * https://github.com/awslabs/aws-encryption-sdk-specification/blob/master/data-format/message-body.md#sequence-number
         */
        material_management_1.needs(sequenceNumber > 0 &&
            identifiers_1.SequenceIdentifier.SEQUENCE_NUMBER_END >= sequenceNumber, 'sequenceNumber out of bounds');
        const buff = new Uint8Array(ivLength);
        const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
        view.setUint32(ivLength - 4, sequenceNumber, false); // big-endian
        return buff;
    }
    function nonFramedBodyIv(ivLength) {
        return frameIv(ivLength, 1);
    }
    function headerAuthIv(ivLength) {
        return new Uint8Array(ivLength); // new Uint8Array is 0 filled by default
    }
    function frameHeader(sequenceNumber, iv) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt32BE(sequenceNumber), iv);
    }
    function finalFrameHeader(sequenceNumber, iv, contentLength) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt32BE(identifiers_1.SequenceIdentifier.SEQUENCE_NUMBER_END), // Final Frame identifier
        uint_util_1.uInt32BE(sequenceNumber), iv, uint_util_1.uInt32BE(contentLength));
    }
    function encodeEncryptionContext(encryptionContext) {
        return (Object.entries(encryptionContext)
            /* Precondition: The serialized encryption context entries must be sorted by UTF-8 key value. */
            .sort(([aKey], [bKey]) => aKey.localeCompare(bKey))
            .map((entries) => entries.map(fromUtf8))
            .map(([key, value]) => concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(key.byteLength), key, uint_util_1.uInt16BE(value.byteLength), value)));
    }
    function serializeEncryptionContext(encryptionContext) {
        const encryptionContextElements = encodeEncryptionContext(encryptionContext);
        /* Check for early return (Postcondition): If there is no context then the length of the _whole_ serialized portion is 0.
         * This is part of the specification of the AWS Encryption SDK Message Format.
         * It is not 0 for length and 0 for count.  The count element is omitted.
         */
        if (!encryptionContextElements.length)
            return uint_util_1.uInt16BE(0);
        const aadData = concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(encryptionContextElements.length), ...encryptionContextElements);
        const aadLength = uint_util_1.uInt16BE(aadData.byteLength);
        return concat_buffers_1.concatBuffers(aadLength, aadData);
    }
    function serializeEncryptedDataKeys(encryptedDataKeys) {
        const encryptedKeyInfo = encryptedDataKeys.map(serializeEncryptedDataKey);
        return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(encryptedDataKeys.length), ...encryptedKeyInfo);
    }
    function serializeEncryptedDataKey(edk) {
        const { providerId, providerInfo, encryptedDataKey, rawInfo } = edk;
        const providerIdBytes = fromUtf8(providerId);
        // The providerInfo is technically a binary field, so I prefer rawInfo
        const providerInfoBytes = rawInfo || fromUtf8(providerInfo);
        return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(providerIdBytes.byteLength), providerIdBytes, uint_util_1.uInt16BE(providerInfoBytes.byteLength), providerInfoBytes, uint_util_1.uInt16BE(encryptedDataKey.byteLength), encryptedDataKey);
    }
    function serializeMessageHeader(messageHeader) {
        /* Precondition: Must be a version that can be serialized. */
        material_management_1.needs(identifiers_1.SerializationVersion[messageHeader.version], 'Unsupported version.');
        if (messageHeader.version === 1) {
            return serializeMessageHeaderV1(messageHeader);
        }
        else {
            return serializeMessageHeaderV2(messageHeader);
        }
    }
    function serializeMessageHeaderV1(messageHeader) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt8(messageHeader.version), uint_util_1.uInt8(messageHeader.type), uint_util_1.uInt16BE(messageHeader.suiteId), messageHeader.messageId, serializeEncryptionContext(messageHeader.encryptionContext), serializeEncryptedDataKeys(messageHeader.encryptedDataKeys), new Uint8Array([messageHeader.contentType]), new Uint8Array([0, 0, 0, 0]), uint_util_1.uInt8(messageHeader.headerIvLength), uint_util_1.uInt32BE(messageHeader.frameLength));
    }
    function serializeMessageHeaderV2(messageHeader) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt8(messageHeader.version), uint_util_1.uInt16BE(messageHeader.suiteId), messageHeader.messageId, serializeEncryptionContext(messageHeader.encryptionContext), serializeEncryptedDataKeys(messageHeader.encryptedDataKeys), new Uint8Array([messageHeader.contentType]), uint_util_1.uInt32BE(messageHeader.frameLength), messageHeader.suiteData);
    }
    /* This _could_ take the material directly.
     * But I don't do that on purpose.
     * It may be overly paranoid,
     * but this way once the material is created,
     * it has a minimum of egress.
     */
    function buildMessageHeader({ encryptionContext, encryptedDataKeys, suite, messageId, frameLength, suiteData, }) {
        const { messageFormat: version, id: suiteId } = suite;
        const contentType = identifiers_1.ContentType.FRAMED_DATA;
        if (version === material_management_1.MessageFormat.V1) {
            const type = identifiers_1.ObjectType.CUSTOMER_AE_DATA;
            const { ivLength: headerIvLength } = suite;
            return {
                version,
                type,
                suiteId,
                messageId,
                encryptionContext,
                encryptedDataKeys,
                contentType,
                headerIvLength,
                frameLength,
            };
        }
        else if (version === material_management_1.MessageFormat.V2) {
            return {
                version,
                suiteId,
                messageId,
                encryptionContext: encryptionContext,
                encryptedDataKeys: encryptedDataKeys,
                contentType,
                frameLength,
                suiteData,
            };
        }
        material_management_1.needs(false, 'Unsupported message format version.');
    }
}
exports.serializeFactory = serializeFactory;
function serializeMessageHeaderAuth({ headerIv, headerAuthTag, messageHeader, }) {
    if (messageHeader.version === material_management_1.MessageFormat.V1) {
        return concat_buffers_1.concatBuffers(headerIv, headerAuthTag);
    }
    return headerAuthTag;
}
exports.serializeMessageHeaderAuth = serializeMessageHeaderAuth;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VyaWFsaXplX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUV0Qzs7Ozs7OztHQU9HO0FBRUgscURBQWdEO0FBQ2hELHlFQU93QztBQUN4QywrQ0FLc0I7QUFDdEIsMkNBQXVEO0FBR3ZELFNBQWdCLGdCQUFnQixDQUFDLFFBQW9DO0lBQ25FLE9BQU87UUFDTCxPQUFPO1FBQ1AsZUFBZTtRQUNmLFlBQVk7UUFDWixXQUFXO1FBQ1gsZ0JBQWdCO1FBQ2hCLHVCQUF1QjtRQUN2QiwwQkFBMEI7UUFDMUIsMEJBQTBCO1FBQzFCLHlCQUF5QjtRQUN6QixzQkFBc0I7UUFDdEIsa0JBQWtCO0tBQ25CLENBQUE7SUFFRCxTQUFTLE9BQU8sQ0FBQyxRQUFrQixFQUFFLGNBQXNCO1FBQ3pEOzs7V0FHRztRQUNILDJCQUFLLENBQ0gsY0FBYyxHQUFHLENBQUM7WUFDaEIsZ0NBQWtCLENBQUMsbUJBQW1CLElBQUksY0FBYyxFQUMxRCw4QkFBOEIsQ0FDL0IsQ0FBQTtRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDeEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQSxDQUFDLGFBQWE7UUFDakUsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsUUFBa0I7UUFDekMsT0FBTyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFFRCxTQUFTLFlBQVksQ0FBQyxRQUFrQjtRQUN0QyxPQUFPLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUMsd0NBQXdDO0lBQzFFLENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FBQyxjQUFzQixFQUFFLEVBQWM7UUFDekQsT0FBTyw4QkFBYSxDQUFDLG9CQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDcEQsQ0FBQztJQUVELFNBQVMsZ0JBQWdCLENBQ3ZCLGNBQXNCLEVBQ3RCLEVBQWMsRUFDZCxhQUFxQjtRQUVyQixPQUFPLDhCQUFhLENBQ2xCLG9CQUFRLENBQUMsZ0NBQWtCLENBQUMsbUJBQW1CLENBQUMsRUFBRSx5QkFBeUI7UUFDM0Usb0JBQVEsQ0FBQyxjQUFjLENBQUMsRUFDeEIsRUFBRSxFQUNGLG9CQUFRLENBQUMsYUFBYSxDQUFDLENBQ3hCLENBQUE7SUFDSCxDQUFDO0lBRUQsU0FBUyx1QkFBdUIsQ0FDOUIsaUJBQW9DO1FBRXBDLE9BQU8sQ0FDTCxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQy9CLGdHQUFnRzthQUMvRixJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEQsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3ZDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FDcEIsOEJBQWEsQ0FDWCxvQkFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFDeEIsR0FBRyxFQUNILG9CQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUMxQixLQUFLLENBQ04sQ0FDRixDQUNKLENBQUE7SUFDSCxDQUFDO0lBRUQsU0FBUywwQkFBMEIsQ0FBQyxpQkFBb0M7UUFDdEUsTUFBTSx5QkFBeUIsR0FBRyx1QkFBdUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBRTVFOzs7V0FHRztRQUNILElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNO1lBQUUsT0FBTyxvQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXpELE1BQU0sT0FBTyxHQUFHLDhCQUFhLENBQzNCLG9CQUFRLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEVBQzFDLEdBQUcseUJBQXlCLENBQzdCLENBQUE7UUFDRCxNQUFNLFNBQVMsR0FBRyxvQkFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUM5QyxPQUFPLDhCQUFhLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFRCxTQUFTLDBCQUEwQixDQUNqQyxpQkFBa0Q7UUFFbEQsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQTtRQUV6RSxPQUFPLDhCQUFhLENBQ2xCLG9CQUFRLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQ2xDLEdBQUcsZ0JBQWdCLENBQ3BCLENBQUE7SUFDSCxDQUFDO0lBRUQsU0FBUyx5QkFBeUIsQ0FBQyxHQUFxQjtRQUN0RCxNQUFNLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUE7UUFDbkUsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzVDLHNFQUFzRTtRQUN0RSxNQUFNLGlCQUFpQixHQUFHLE9BQU8sSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDM0QsT0FBTyw4QkFBYSxDQUNsQixvQkFBUSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsRUFDcEMsZUFBZSxFQUNmLG9CQUFRLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQ3RDLGlCQUFpQixFQUNqQixvQkFBUSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxFQUNyQyxnQkFBZ0IsQ0FDakIsQ0FBQTtJQUNILENBQUM7SUFFRCxTQUFTLHNCQUFzQixDQUFDLGFBQTRCO1FBQzFELDZEQUE2RDtRQUM3RCwyQkFBSyxDQUFDLGtDQUFvQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO1FBQzFFLElBQUksYUFBYSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDL0IsT0FBTyx3QkFBd0IsQ0FBQyxhQUFnQyxDQUFDLENBQUE7U0FDbEU7YUFBTTtZQUNMLE9BQU8sd0JBQXdCLENBQUMsYUFBZ0MsQ0FBQyxDQUFBO1NBQ2xFO0lBQ0gsQ0FBQztJQUVELFNBQVMsd0JBQXdCLENBQUMsYUFBOEI7UUFDOUQsT0FBTyw4QkFBYSxDQUNsQixpQkFBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFDNUIsaUJBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQ3pCLG9CQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUMvQixhQUFhLENBQUMsU0FBUyxFQUN2QiwwQkFBMEIsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFDM0QsMEJBQTBCLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEVBQzNELElBQUksVUFBVSxDQUFDLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQzNDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDNUIsaUJBQUssQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQ25DLG9CQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUNwQyxDQUFBO0lBQ0gsQ0FBQztJQUVELFNBQVMsd0JBQXdCLENBQUMsYUFBOEI7UUFDOUQsT0FBTyw4QkFBYSxDQUNsQixpQkFBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFDNUIsb0JBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQy9CLGFBQWEsQ0FBQyxTQUFTLEVBQ3ZCLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUMzRCwwQkFBMEIsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFDM0QsSUFBSSxVQUFVLENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsRUFDM0Msb0JBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEVBQ25DLGFBQWEsQ0FBQyxTQUFTLENBQ3hCLENBQUE7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxTQUFTLGtCQUFrQixDQUFDLEVBQzFCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsS0FBSyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsU0FBUyxHQVFWO1FBQ0MsTUFBTSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUNyRCxNQUFNLFdBQVcsR0FBRyx5QkFBVyxDQUFDLFdBQVcsQ0FBQTtRQUUzQyxJQUFJLE9BQU8sS0FBSyxtQ0FBYSxDQUFDLEVBQUUsRUFBRTtZQUNoQyxNQUFNLElBQUksR0FBRyx3QkFBVSxDQUFDLGdCQUFnQixDQUFBO1lBQ3hDLE1BQU0sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLEdBQUcsS0FBSyxDQUFBO1lBQzFDLE9BQU87Z0JBQ0wsT0FBTztnQkFDUCxJQUFJO2dCQUNKLE9BQU87Z0JBQ1AsU0FBUztnQkFDVCxpQkFBaUI7Z0JBQ2pCLGlCQUFpQjtnQkFDakIsV0FBVztnQkFDWCxjQUFjO2dCQUNkLFdBQVc7YUFDTyxDQUFBO1NBQ3JCO2FBQU0sSUFBSSxPQUFPLEtBQUssbUNBQWEsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsT0FBTztnQkFDTCxPQUFPO2dCQUNQLE9BQU87Z0JBQ1AsU0FBUztnQkFDVCxpQkFBaUIsRUFBRSxpQkFBaUI7Z0JBQ3BDLGlCQUFpQixFQUFFLGlCQUFpQjtnQkFDcEMsV0FBVztnQkFDWCxXQUFXO2dCQUNYLFNBQVM7YUFDUyxDQUFBO1NBQ3JCO1FBRUQsMkJBQUssQ0FBQyxLQUFLLEVBQUUscUNBQXFDLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0FBQ0gsQ0FBQztBQWxORCw0Q0FrTkM7QUFFRCxTQUFnQiwwQkFBMEIsQ0FBQyxFQUN6QyxRQUFRLEVBQ1IsYUFBYSxFQUNiLGFBQWEsR0FLZDtJQUNDLElBQUksYUFBYSxDQUFDLE9BQU8sS0FBSyxtQ0FBYSxDQUFDLEVBQUUsRUFBRTtRQUM5QyxPQUFPLDhCQUFhLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0tBQzlDO0lBRUQsT0FBTyxhQUFhLENBQUE7QUFDdEIsQ0FBQztBQWRELGdFQWNDIn0=