"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeSignature = exports.serializeSignatureInfo = void 0;
/*
 * This public interface for serializing the AWS Encryption SDK Message Footer Format
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#footer-structure
 */
const concat_buffers_1 = require("./concat_buffers");
const uint_util_1 = require("./uint_util");
const material_management_1 = require("@aws-crypto/material-management");
function serializeSignatureInfo(signature) {
    return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(signature.byteLength), signature);
}
exports.serializeSignatureInfo = serializeSignatureInfo;
function deserializeSignature({ buffer, byteOffset, byteLength, }) {
    /* Precondition: There must be information for a signature. */
    material_management_1.needs(byteLength && byteLength > 2, 'Invalid Signature');
    /* Uint8Array is a view on top of the underlying ArrayBuffer.
     * This means that raw underlying memory stored in the ArrayBuffer
     * may be larger than the Uint8Array.  This is especially true of
     * the Node.js Buffer object.  The offset and length *must* be
     * passed to the DataView otherwise I will get unexpected results.
     */
    const dataView = new DataView(buffer, byteOffset, byteLength);
    const signatureLength = dataView.getUint16(0, false); // big endian
    /* Precondition: The signature length must be positive. */
    material_management_1.needs(signatureLength > 0, 'Invalid Signature');
    /* Precondition: The data must match the serialized length. */
    material_management_1.needs(byteLength === signatureLength + 2, 'Invalid Signature');
    return new Uint8Array(buffer, byteOffset + 2, signatureLength);
}
exports.deserializeSignature = deserializeSignature;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlX2luZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2lnbmF0dXJlX2luZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUV0Qzs7Ozs7OztHQU9HO0FBRUgscURBQWdEO0FBQ2hELDJDQUFzQztBQUN0Qyx5RUFBdUQ7QUFFdkQsU0FBZ0Isc0JBQXNCLENBQUMsU0FBcUI7SUFDMUQsT0FBTyw4QkFBYSxDQUFDLG9CQUFRLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBQ2pFLENBQUM7QUFGRCx3REFFQztBQUVELFNBQWdCLG9CQUFvQixDQUFDLEVBQ25DLE1BQU0sRUFDTixVQUFVLEVBQ1YsVUFBVSxHQUNDO0lBQ1gsOERBQThEO0lBQzlELDJCQUFLLENBQUMsVUFBVSxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtJQUN4RDs7Ozs7T0FLRztJQUNILE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDN0QsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUEsQ0FBQyxhQUFhO0lBQ2xFLDBEQUEwRDtJQUMxRCwyQkFBSyxDQUFDLGVBQWUsR0FBRyxDQUFDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtJQUMvQyw4REFBOEQ7SUFDOUQsMkJBQUssQ0FBQyxVQUFVLEtBQUssZUFBZSxHQUFHLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0lBQzlELE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLFVBQVUsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUE7QUFDaEUsQ0FBQztBQXBCRCxvREFvQkMifQ==