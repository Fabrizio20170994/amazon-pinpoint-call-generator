"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.deferCache = exports.cacheClients = exports.excludeRegions = exports.limitRegions = exports.getClient = void 0;
const material_management_1 = require("@aws-crypto/material-management");
function getClient(KMSClient, defaultConfig) {
    return function getKmsClient(region) {
        /* a KMS alias is supported.  These do not have a region
         * in this case, the Encryption SDK should find the default region
         * or the default region needs to be supplied to this function
         */
        const config = (region
            ? { ...defaultConfig, region }
            : { ...defaultConfig });
        const client = new KMSClient(config);
        /* Postcondition: A region must be configured.
         * The AWS SDK has a process for determining the default region.
         * A user can configure a default region by setting it in `defaultConfig`
         * But KMS requires a region to operate.
         */
        // @ts-ignore the V3 client has set the config to protected, reasonable, but I need to know...
        material_management_1.needs(client.config.region, 'A region is required');
        return client;
    };
}
exports.getClient = getClient;
function limitRegions(regions, getClient) {
    /* Precondition: limitRegions requires that region be a string. */
    material_management_1.needs(regions.every((r) => !!r && typeof r === 'string'), 'Can only limit on region strings');
    return (region) => {
        if (!regions.includes(region))
            return false;
        return getClient(region);
    };
}
exports.limitRegions = limitRegions;
function excludeRegions(regions, getClient) {
    /* Precondition: excludeRegions requires region be a string. */
    material_management_1.needs(regions.every((r) => !!r && typeof r === 'string'), 'Can only exclude on region strings');
    return (region) => {
        if (regions.includes(region))
            return false;
        return getClient(region);
    };
}
exports.excludeRegions = excludeRegions;
function cacheClients(getClient) {
    const clientsCache = {};
    return (region) => {
        // Do not cache until KMS has been responded in the given region
        if (!Object.prototype.hasOwnProperty.call(clientsCache, region))
            return deferCache(clientsCache, region, getClient(region));
        return clientsCache[region];
    };
}
exports.cacheClients = cacheClients;
/* It is possible that a malicious user can attempt a local resource
 * DOS by sending ciphertext with a large number of spurious regions.
 * This will fill the cache with regions and exhaust resources.
 * To avoid this, a call succeeds in contacting KMS.
 * This does *not* mean that this call is successful,
 * only that the region is backed by a functional KMS service.
 */
function deferCache(clientsCache, region, client) {
    /* Check for early return (Postcondition): No client, then I cache false and move on. */
    if (!client) {
        clientsCache[region] = false;
        return false;
    }
    const { encrypt, decrypt, generateDataKey } = client;
    return [
        'encrypt',
        'decrypt',
        'generateDataKey',
    ].reduce(wrapOperation, client);
    /* Wrap each of the operations to cache the client on response */
    function wrapOperation(client, name) {
        const original = client[name];
        client[name] = async function wrappedOperation(args) {
            // @ts-ignore (there should be a TypeScript solution for this)
            const v2vsV3Response = original.call(client, args);
            const v2vsV3Promise = 'promise' in v2vsV3Response ? v2vsV3Response.promise() : v2vsV3Response;
            return v2vsV3Promise
                .then((response) => {
                clientsCache[region] = Object.assign(client, {
                    encrypt,
                    decrypt,
                    generateDataKey,
                });
                return response;
            })
                .catch(async (e) => {
                /* Errors from a KMS contact mean that the region is "live".
                 * As such the client can be cached because the problem is not with the client per se,
                 * but with the request made.
                 */
                if (e.$metadata && e.$metadata.httpStatusCode) {
                    clientsCache[region] = Object.assign(client, {
                        encrypt,
                        decrypt,
                        generateDataKey,
                    });
                }
                // The request was not successful
                return Promise.reject(e);
            });
        };
        return client;
    }
}
exports.deferCache = deferCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21zX2NsaWVudF9zdXBwbGllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9rbXNfY2xpZW50X3N1cHBsaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7QUFFdEMseUVBQXVEO0FBdUJ2RCxTQUFnQixTQUFTLENBQ3ZCLFNBQTJDLEVBQzNDLGFBQXNCO0lBRXRCLE9BQU8sU0FBUyxZQUFZLENBQUMsTUFBYztRQUN6Qzs7O1dBR0c7UUFDSCxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU07WUFDcEIsQ0FBQyxDQUFDLEVBQUUsR0FBRyxhQUFhLEVBQUUsTUFBTSxFQUFFO1lBQzlCLENBQUMsQ0FBQyxFQUFFLEdBQUcsYUFBYSxFQUFFLENBQVcsQ0FBQTtRQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVwQzs7OztXQUlHO1FBQ0gsOEZBQThGO1FBQzlGLDJCQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLENBQUMsQ0FBQTtRQUNuRCxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUMsQ0FBQTtBQUNILENBQUM7QUF2QkQsOEJBdUJDO0FBRUQsU0FBZ0IsWUFBWSxDQUMxQixPQUFpQixFQUNqQixTQUFvQztJQUVwQyxrRUFBa0U7SUFDbEUsMkJBQUssQ0FDSCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUNsRCxrQ0FBa0MsQ0FDbkMsQ0FBQTtJQUVELE9BQU8sQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMx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