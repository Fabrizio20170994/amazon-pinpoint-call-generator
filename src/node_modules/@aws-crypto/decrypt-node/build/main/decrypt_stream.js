"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._decryptStream = void 0;
const material_management_node_1 = require("@aws-crypto/material-management-node");
const parse_header_stream_1 = require("./parse_header_stream");
const verify_stream_1 = require("./verify_stream");
const decipher_stream_1 = require("./decipher_stream");
const duplexify_1 = __importDefault(require("duplexify"));
// @ts-ignore
const readable_stream_1 = require("readable-stream");
function _decryptStream(decryptParameters, cmm, { maxBodySize } = {}) {
    /* If the cmm is a Keyring, wrap it with NodeDefaultCMM. */
    cmm =
        cmm instanceof material_management_node_1.KeyringNode
            ? new material_management_node_1.NodeDefaultCryptographicMaterialsManager(cmm)
            : cmm;
    const parseHeaderStream = new parse_header_stream_1.ParseHeaderStream(decryptParameters.signaturePolicy, decryptParameters.clientOptions, cmm);
    const verifyStream = new verify_stream_1.VerifyStream({ maxBodySize });
    const decipherStream = decipher_stream_1.getDecipherStream();
    const stream = new duplexify_1.default(parseHeaderStream, decipherStream);
    /* pipeline will _either_ stream.destroy or the callback.
     * decipherStream uses destroy to dispose the material.
     * So I tack a pass though stream onto the end.
     */
    readable_stream_1.pipeline(parseHeaderStream, verifyStream, decipherStream, new readable_stream_1.PassThrough(), (err) => {
        if (err)
            stream.emit('error', err);
    });
    // Forward header events
    parseHeaderStream.once('MessageHeader', (header) => stream.emit('MessageHeader', header));
    return stream;
}
exports._decryptStream = _decryptStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjcnlwdF9zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjcnlwdF9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7Ozs7OztBQUV0QyxtRkFJNkM7QUFDN0MsK0RBQXlEO0FBQ3pELG1EQUE4QztBQUM5Qyx1REFBcUQ7QUFFckQsMERBQWlDO0FBR2pDLGFBQWE7QUFDYixxREFBdUQ7QUFFdkQsU0FBZ0IsY0FBYyxDQUM1QixpQkFBb0MsRUFDcEMsR0FBdUMsRUFDdkMsRUFBRSxXQUFXLEtBQTJCLEVBQUU7SUFFMUMsMkRBQTJEO0lBQzNELEdBQUc7UUFDRCxHQUFHLFlBQVksc0NBQVc7WUFDeEIsQ0FBQyxDQUFDLElBQUksbUVBQXdDLENBQUMsR0FBRyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxHQUFHLENBQUE7SUFFVCxNQUFNLGlCQUFpQixHQUFHLElBQUksdUNBQWlCLENBQzdDLGlCQUFpQixDQUFDLGVBQWUsRUFDakMsaUJBQWlCLENBQUMsYUFBYSxFQUMvQixHQUFHLENBQ0osQ0FBQTtJQUNELE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7SUFDdEQsTUFBTSxjQUFjLEdBQUcsbUNBQWlCLEVBQUUsQ0FBQTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLG1CQUFTLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxDQUFDLENBQUE7SUFFL0Q7OztPQUdHO0lBQ0gsMEJBQVEsQ0FDTixpQkFBaUIsRUFDakIsWUFBWSxFQUNaLGNBQWMsRUFDZCxJQUFJLDZCQUFXLEVBQUUsRUFDakIsQ0FBQyxHQUFVLEVBQUUsRUFBRTtRQUNiLElBQUksR0FBRztZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3BDLENBQUMsQ0FDRixDQUFBO0lBRUQsd0JBQXdCO0lBQ3hCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FDckMsQ0FBQTtJQUVELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQXhDRCx3Q0F3Q0MifQ==