"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheEntryHasExceededLimits = exports.decryptMaterials = exports.getEncryptionMaterials = exports.decorateProperties = void 0;
const material_management_1 = require("@aws-crypto/material-management");
const serialize_1 = require("@aws-crypto/serialize");
function decorateProperties(obj, input) {
    const { cache, backingMaterialsManager, maxAge, maxBytesEncrypted, maxMessagesEncrypted, partition, } = input;
    /* Precondition: A caching material manager needs a cache. */
    material_management_1.needs(cache, 'You must provide a cache.');
    /* Precondition: A caching material manager needs a way to get material. */
    material_management_1.needs(backingMaterialsManager, 'You must provide a backing material source.');
    /* Precondition: You *can not* cache something forever. */
    material_management_1.needs(maxAge > 0, 'You must configure a maxAge');
    /* Precondition: maxBytesEncrypted must be inside bounds.  i.e. positive and not more than the maximum. */
    material_management_1.needs(!maxBytesEncrypted ||
        (maxBytesEncrypted > 0 &&
            serialize_1.Maximum.BYTES_PER_CACHED_KEY_LIMIT >= maxBytesEncrypted), 'maxBytesEncrypted is outside of bounds.');
    /* Precondition: maxMessagesEncrypted must be inside bounds.  i.e. positive and not more than the maximum. */
    material_management_1.needs(!maxMessagesEncrypted ||
        (maxMessagesEncrypted > 0 &&
            serialize_1.Maximum.MESSAGES_PER_CACHED_KEY_LIMIT >= maxMessagesEncrypted), 'maxMessagesEncrypted is outside of bounds.');
    /* Precondition: partition must be a string. */
    material_management_1.needs(partition && typeof partition === 'string', 'partition must be a string.');
    material_management_1.readOnlyProperty(obj, '_cache', cache);
    material_management_1.readOnlyProperty(obj, '_backingMaterialsManager', backingMaterialsManager);
    material_management_1.readOnlyProperty(obj, '_maxAge', maxAge);
    material_management_1.readOnlyProperty(obj, '_maxBytesEncrypted', maxBytesEncrypted || serialize_1.Maximum.BYTES_PER_CACHED_KEY_LIMIT);
    material_management_1.readOnlyProperty(obj, '_maxMessagesEncrypted', maxMessagesEncrypted || serialize_1.Maximum.MESSAGES_PER_CACHED_KEY_LIMIT);
    material_management_1.readOnlyProperty(obj, '_partition', partition);
}
exports.decorateProperties = decorateProperties;
function getEncryptionMaterials({ buildEncryptionMaterialCacheKey, }) {
    return async function getEncryptionMaterials(request) {
        const { suite, encryptionContext, plaintextLength, commitmentPolicy, } = request;
        /* Check for early return (Postcondition): If I can not cache the EncryptionMaterial, do not even look. */
        if ((suite && !suite.cacheSafe) ||
            typeof plaintextLength !== 'number' ||
            plaintextLength < 0) {
            const material = await this._backingMaterialsManager.getEncryptionMaterials(request);
            return material;
        }
        const cacheKey = await buildEncryptionMaterialCacheKey(this._partition, {
            suite,
            encryptionContext,
        });
        const entry = this._cache.getEncryptionMaterial(cacheKey, plaintextLength);
        /* Check for early return (Postcondition): If I have a valid EncryptionMaterial, return it. */
        if (entry && !this._cacheEntryHasExceededLimits(entry)) {
            return cloneResponse(entry.response);
        }
        else {
            this._cache.del(cacheKey);
        }
        const material = await this._backingMaterialsManager
            /* Strip any information about the plaintext from the backing request,
             * because the resulting response may be used to encrypt multiple plaintexts.
             */
            .getEncryptionMaterials({ suite, encryptionContext, commitmentPolicy });
        /* Check for early return (Postcondition): If I can not cache the EncryptionMaterial, just return it. */
        if (!material.suite.cacheSafe)
            return material;
        /* It is possible for an entry to exceed limits immediately.
         * The simplest case is to need to encrypt more than then maxBytesEncrypted.
         * In this case, I return the response to encrypt the data,
         * but do not put a know invalid item into the cache.
         */
        const testEntry = {
            response: material,
            now: Date.now(),
            messagesEncrypted: 1,
            bytesEncrypted: plaintextLength,
        };
        if (!this._cacheEntryHasExceededLimits(testEntry)) {
            this._cache.putEncryptionMaterial(cacheKey, material, plaintextLength, this._maxAge);
            return cloneResponse(material);
        }
        else {
            /* Postcondition: If the material has exceeded limits it MUST NOT be cloned.
             * If it is cloned, and the clone is returned,
             * then there exist a copy of the unencrypted data key.
             * It is true that this data would be caught by GC, it is better to just not rely on that.
             */
            return material;
        }
    };
}
exports.getEncryptionMaterials = getEncryptionMaterials;
function decryptMaterials({ buildDecryptionMaterialCacheKey, }) {
    return async function decryptMaterials(request) {
        const { suite } = request;
        /* Check for early return (Postcondition): If I can not cache the DecryptionMaterial, do not even look. */
        if (!suite.cacheSafe) {
            const material = await this._backingMaterialsManager.decryptMaterials(request);
            return material;
        }
        const cacheKey = await buildDecryptionMaterialCacheKey(this._partition, request);
        const entry = this._cache.getDecryptionMaterial(cacheKey);
        /* Check for early return (Postcondition): If I have a valid DecryptionMaterial, return it. */
        if (entry && !this._cacheEntryHasExceededLimits(entry)) {
            return cloneResponse(entry.response);
        }
        else {
            this._cache.del(cacheKey);
        }
        const material = await this._backingMaterialsManager.decryptMaterials(request);
        this._cache.putDecryptionMaterial(cacheKey, material, this._maxAge);
        return cloneResponse(material);
    };
}
exports.decryptMaterials = decryptMaterials;
function cacheEntryHasExceededLimits() {
    return function cacheEntryHasExceededLimits({ now, messagesEncrypted, bytesEncrypted }) {
        const age = Date.now() - now;
        return (age > this._maxAge ||
            messagesEncrypted > this._maxMessagesEncrypted ||
            bytesEncrypted > this._maxBytesEncrypted);
    };
}
exports.cacheEntryHasExceededLimits = cacheEntryHasExceededLimits;
/**
 * I need to clone the underlying material.
 * Because when the Encryption SDK is done with material, it will zero it out.
 * Plucking off the material and cloning just that and then returning the rest of the response
 * can just be handled in one place.
 * @param material EncryptionMaterial|DecryptionMaterial
 * @return EncryptionMaterial|DecryptionMaterial
 */
function cloneResponse(material) {
    return material_management_1.cloneMaterial(material);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19jcnlwdG9ncmFwaGljX21hdGVyaWFsc19kZWNvcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhY2hpbmdfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBRXRDLHlFQWF3QztBQUN4QyxxREFBK0M7QUFPL0MsU0FBZ0Isa0JBQWtCLENBQ2hDLEdBQStCLEVBQy9CLEtBQThDO0lBRTlDLE1BQU0sRUFDSixLQUFLLEVBQ0wsdUJBQXVCLEVBQ3ZCLE1BQU0sRUFDTixpQkFBaUIsRUFDakIsb0JBQW9CLEVBQ3BCLFNBQVMsR0FDVixHQUFHLEtBQUssQ0FBQTtJQUVULDZEQUE2RDtJQUM3RCwyQkFBSyxDQUFDLEtBQUssRUFBRSwyQkFBMkIsQ0FBQyxDQUFBO0lBQ3pDLDJFQUEyRTtJQUMzRSwyQkFBSyxDQUFDLHVCQUF1QixFQUFFLDZDQUE2QyxDQUFDLENBQUE7SUFDN0UsMERBQTBEO0lBQzFELDJCQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFBO0lBQ2hELDBHQUEwRztJQUMxRywyQkFBSyxDQUNILENBQUMsaUJBQWlCO1FBQ2hCLENBQUMsaUJBQWlCLEdBQUcsQ0FBQztZQUNwQixtQkFBTyxDQUFDLDBCQUEwQixJQUFJLGlCQUFpQixDQUFDLEVBQzVELHlDQUF5QyxDQUMxQyxDQUFBO0lBQ0QsNkdBQTZHO0lBQzdHLDJCQUFLLENBQ0gsQ0FBQyxvQkFBb0I7UUFDbkIsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDO1lBQ3ZCLG1CQUFPLENBQUMsNkJBQTZCLElBQUksb0JBQW9CLENBQUMsRUFDbEUsNENBQTRDLENBQzdDLENBQUE7SUFDRCwrQ0FBK0M7SUFDL0MsMkJBQUssQ0FDSCxTQUFTLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUMxQyw2QkFBNkIsQ0FD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