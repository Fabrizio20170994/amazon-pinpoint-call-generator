"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.rawAesEncryptedPartsFactory = exports.rawAesEncryptedDataKeyFactory = void 0;
/* For raw AES keyrings the required wrapping information is stored in an EncryptedDataKey.
 * KeyNamespace (identifies the keyring "class"),
 * KeyName (identifies this specific keyring, like a KMS CMK ARN)
 *
 * {
 *   providerId: KeyNamespace
 *   providerInfo: utf8Encode(KeyName + TagLengthBits uInt32BE + IVLength uInt32BE + iv)
 *   encryptedDataKey: wrapped key + authTag
 * }
 *
 * The AAD (encryption context) is the same as the message.
 */
const serialize_1 = require("@aws-crypto/serialize");
const material_management_1 = require("@aws-crypto/material-management");
function rawAesEncryptedDataKeyFactory(toUtf8, fromUtf8) {
    return { rawAesEncryptedDataKey };
    function rawAesEncryptedDataKey(keyNamespace, keyName, iv, ciphertext, authTag) {
        const ivLength = iv.byteLength;
        const authTagBitLength = authTag.byteLength * 8;
        const encryptedDataKey = serialize_1.concatBuffers(ciphertext, authTag);
        const providerId = keyNamespace;
        const rawInfo = serialize_1.concatBuffers(fromUtf8(keyName), serialize_1.uInt32BE(authTagBitLength), serialize_1.uInt32BE(ivLength), iv);
        const providerInfo = toUtf8(rawInfo);
        return new material_management_1.EncryptedDataKey({
            encryptedDataKey,
            providerId,
            providerInfo,
            rawInfo,
        });
    }
}
exports.rawAesEncryptedDataKeyFactory = rawAesEncryptedDataKeyFactory;
function rawAesEncryptedPartsFactory(fromUtf8) {
    return { rawAesEncryptedParts };
    function rawAesEncryptedParts(suite, keyName, { encryptedDataKey, rawInfo }) {
        /* Precondition: rawInfo must be a Uint8Array. */
        if (!(rawInfo instanceof Uint8Array))
            throw new Error('Malformed Encrypted Data Key.');
        // see above for format, slice off the "string part"
        rawInfo = rawInfo.slice(fromUtf8(keyName).byteLength);
        /* Uint8Array is a view on top of the underlying ArrayBuffer.
         * This means that raw underlying memory stored in the ArrayBuffer
         * may be larger than the Uint8Array.  This is especially true of
         * the Node.js Buffer object.  The offset and length *must* be
         * passed to the DataView otherwise I will get unexpected results.
         */
        const dataView = new DataView(rawInfo.buffer, rawInfo.byteOffset, rawInfo.byteLength);
        /* See above:
         * uInt32BE(authTagBitLength),uInt32BE(ivLength), iv
         */
        const tagLengthBits = dataView.getUint32(0, false); // big endian
        const ivLength = dataView.getUint32(4, false); // big endian
        /* Precondition: The ivLength must match the algorith suite specification. */
        material_management_1.needs(ivLength === suite.ivLength, 'Malformed providerInfo');
        /* Precondition: The tagLength must match the algorith suite specification. */
        material_management_1.needs(tagLengthBits === suite.tagLength, 'Malformed providerInfo');
        /* Precondition: The byteLength of rawInfo should match the encoded length. */
        material_management_1.needs(rawInfo.byteLength === 4 + 4 + ivLength, 'Malformed providerInfo');
        const tagLength = tagLengthBits / 8;
        /* Precondition: The encryptedDataKey byteLength must match the algorith suite specification and encoded length. */
        material_management_1.needs(encryptedDataKey.byteLength === tagLength + suite.keyLengthBytes, 'Malformed providerInfo');
        const iv = rawInfo.slice(-ivLength);
        const authTag = encryptedDataKey.slice(-tagLength);
        const ciphertext = encryptedDataKey.slice(0, -tagLength);
        return { authTag, ciphertext, iv };
    }
}
exports.rawAesEncryptedPartsFactory = rawAesEncryptedPartsFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X2Flc19lbmNyeXB0ZWRfZGF0YV9rZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Jhd19hZXNfZW5jcnlwdGVkX2RhdGFfa2V5cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBRXRDOzs7Ozs7Ozs7OztHQVdHO0FBRUgscURBQStEO0FBQy9ELHlFQUl3QztBQUV4QyxTQUFnQiw2QkFBNkIsQ0FDM0MsTUFBcUMsRUFDckMsUUFBdUM7SUFFdkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLENBQUE7SUFFakMsU0FBUyxzQkFBc0IsQ0FDN0IsWUFBb0IsRUFDcEIsT0FBZSxFQUNmLEVBQWMsRUFDZCxVQUFzQixFQUN0QixPQUFtQjtRQUVuQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFBO1FBQzlCLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUE7UUFDL0MsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBYSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMzRCxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUE7UUFDL0IsTUFBTSxPQUFPLEdBQUcseUJBQWEsQ0FDM0IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUNqQixvQkFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQzFCLG9CQUFRLENBQUMsUUFBUSxDQUFDLEVBQ2xCLEVBQUUsQ0FDSCxDQUFBO1FBQ0QsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3BDLE9BQU8sSUFBSSxzQ0FBZ0IsQ0FBQztZQUMxQixnQkFBZ0I7WUFDaEIsVUFBVTtZQUNWLFlBQVk7WUFDWixPQUFPO1NBQ1IsQ0FBQyxDQUFBO0lBQ0osQ0FBQztBQUNILENBQUM7QUEvQkQsc0VBK0JDO0FBRUQsU0FBZ0IsMkJBQTJCLENBQ3pDLFFBQXVDO0lBRXZDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFBO0lBRS9CLFNBQVMsb0JBQW9CLENBQzNCLEtBQXFCLEVBQ3JCLE9BQWUsRUFDZixFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBb0I7UUFFL0MsaURBQWlEO1FBQ2pELElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSxVQUFVLENBQUM7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO1FBQ2xELG9EQUFvRDtRQUNwRCxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDckQ7Ozs7O1dBS0c7UUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FDM0IsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsVUFBVSxFQUNsQixPQUFPLENBQUMsVUFBVSxDQUNuQixDQUFBO1FBQ0Q7O1dBRUc7UUFDSCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQSxDQUFDLGFBQWE7UUFDaEUsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUEsQ0FBQyxhQUFhO1FBQzNELDZFQUE2RTtRQUM3RSwyQkFBSyxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFLHdCQUF3QixDQUFDLENBQUE7UUFDNUQsOEVBQThFO1FBQzlFLDJCQUFLLENBQUMsYUFBYSxLQUFLLEtBQUssQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUMsQ0FBQTtRQUNsRSw4RUFBOEU7UUFDOUUsMkJBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLHdCQUF3QixDQUFDLENBQUE7UUFDeEUsTUFBTSxTQUFTLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQTtRQUNuQyxtSEFBbUg7UUFDbkgsMkJBQUssQ0FDSCxnQkFBZ0IsQ0FBQyxVQUFVLEtBQUssU0FBUyxHQUFHLEtBQUssQ0FBQyxjQUFjLEVBQ2hFLHdCQUF3QixDQUN6QixDQUFBO1FBQ0QsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV4RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsQ0FBQTtJQUNwQyxDQUFDO0FBQ0gsQ0FBQztBQWpERCxrRUFpREMifQ==