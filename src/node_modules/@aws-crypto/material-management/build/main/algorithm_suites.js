"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlgorithmSuite = exports.MessageFormat = exports.CommitmentPolicySuites = exports.CommittingAlgorithmSuiteIdentifier = exports.NonCommittingAlgorithmSuiteIdentifier = exports.SignaturePolicySuites = exports.NonSigningAlgorithmSuiteIdentifier = exports.SignaturePolicy = exports.CommitmentPolicy = exports.AlgorithmSuiteIdentifier = void 0;
/*
 * This file contains information about particular algorithm suites used
 * within the encryption SDK.  In most cases, end-users don't need to
 * manipulate this structure, but it can occasionally be needed for more
 * advanced use cases, such as writing keyrings.
 *
 * Here we describe the overall shape of the Algorithm Suites used by the AWS Encryption
 * SDK for JavaScript.  Specific details for Node.js and WebCrypto can be found
 * in the respective files
 */
const immutable_class_1 = require("./immutable_class");
const needs_1 = require("./needs");
/* References to https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/algorithms-reference.html
 * These define the possible parameters for algorithm specifications that correspond
 * to the Node.js or WebCrypto environment.
 * These parameters are composed into an algorithm suite specification for each
 * environment in the respective files.
 */
var AlgorithmSuiteIdentifier;
(function (AlgorithmSuiteIdentifier) {
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES128_GCM_IV12_TAG16"] = 20] = "ALG_AES128_GCM_IV12_TAG16";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES192_GCM_IV12_TAG16"] = 70] = "ALG_AES192_GCM_IV12_TAG16";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES256_GCM_IV12_TAG16"] = 120] = "ALG_AES256_GCM_IV12_TAG16";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256"] = 276] = "ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256"] = 326] = "ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256"] = 376] = "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256"] = 532] = "ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384"] = 838] = "ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384"] = 888] = "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY"] = 1144] = "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY";
    AlgorithmSuiteIdentifier[AlgorithmSuiteIdentifier["ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384"] = 1400] = "ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384";
})(AlgorithmSuiteIdentifier = exports.AlgorithmSuiteIdentifier || (exports.AlgorithmSuiteIdentifier = {}));
Object.freeze(AlgorithmSuiteIdentifier);
var CommitmentPolicy;
(function (CommitmentPolicy) {
    CommitmentPolicy["FORBID_ENCRYPT_ALLOW_DECRYPT"] = "FORBID_ENCRYPT_ALLOW_DECRYPT";
    // 'REQUIRE_ENCRYPT_ALLOW_DECRYPT' = 'REQUIRE_ENCRYPT_ALLOW_DECRYPT',
    // 'REQUIRE_ENCRYPT_REQUIRE_DECRYPT' = 'REQUIRE_ENCRYPT_REQUIRE_DECRYPT',
})(CommitmentPolicy = exports.CommitmentPolicy || (exports.CommitmentPolicy = {}));
Object.freeze(CommitmentPolicy);
var SignaturePolicy;
(function (SignaturePolicy) {
    SignaturePolicy["ALLOW_ENCRYPT_ALLOW_DECRYPT"] = "ALLOW_ENCRYPT_ALLOW_DECRYPT";
    SignaturePolicy["ALLOW_ENCRYPT_FORBID_DECRYPT"] = "ALLOW_ENCRYPT_FORBID_DECRYPT";
})(SignaturePolicy = exports.SignaturePolicy || (exports.SignaturePolicy = {}));
Object.freeze(SignaturePolicy);
exports.NonSigningAlgorithmSuiteIdentifier = (() => {
    const { ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256, ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384, 
    // Both the name side above, and the id side below
    [0x0214]: NAME_ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256, [0x0346]: NAME_ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, [0x0378]: NAME_ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, [0x0578]: NAME_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384, ...NonSigningAlgorithmSuiteIdentifier } = AlgorithmSuiteIdentifier;
    return NonSigningAlgorithmSuiteIdentifier;
})();
exports.SignaturePolicySuites = Object.freeze({
    isDecryptEnabled(signaturePolicy, suite, messageId) {
        const id = suite.id || suite;
        const name = suite.name || AlgorithmSuiteIdentifier[id];
        let decryption_client_name = 'decryptStream';
        let signature_description = 'signed';
        if (signaturePolicy === SignaturePolicy.ALLOW_ENCRYPT_FORBID_DECRYPT) {
            decryption_client_name = 'decryptUnsignedMessageStream';
            signature_description = 'un-signed';
        }
        /* Precondition: Only handle DecryptionMaterial for algorithm suites supported in signaturePolicy. */
        needs_1.needs(this[signaturePolicy].decryptEnabledSuites[id], `Configuration conflict. ` +
            `Cannot process message with ID ${messageId} ` +
            `due to client method ${decryption_client_name} ` +
            `requiring only ${signature_description} messages. ` +
            `Algorithm ID was ${name}. `
        //TODO: Append link to docs about signed vs unsigned and streaming
        //Maybe: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/concepts.html#digital-sigs
        );
    },
    [SignaturePolicy.ALLOW_ENCRYPT_ALLOW_DECRYPT]: Object.freeze({
        decryptEnabledSuites: AlgorithmSuiteIdentifier,
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384,
    }),
    [SignaturePolicy.ALLOW_ENCRYPT_FORBID_DECRYPT]: Object.freeze({
        decryptEnabledSuites: exports.NonSigningAlgorithmSuiteIdentifier,
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY,
    }),
});
exports.NonCommittingAlgorithmSuiteIdentifier = (() => {
    const { ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY, ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384, 
    // Both the name side above, and the id side below
    [0x0478]: NAME_ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY, [0x0578]: NAME_ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384, ...NonCommittingAlgorithmSuiteIdentifier } = AlgorithmSuiteIdentifier;
    return NonCommittingAlgorithmSuiteIdentifier;
})();
exports.CommittingAlgorithmSuiteIdentifier = (() => {
    const { ALG_AES128_GCM_IV12_TAG16, ALG_AES192_GCM_IV12_TAG16, ALG_AES256_GCM_IV12_TAG16, ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256, ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256, ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256, ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256, ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, 
    // Both the name side above, and the id side below
    [0x0014]: NAME_ALG_AES128_GCM_IV12_TAG16, [0x0046]: NAME_ALG_AES192_GCM_IV12_TAG16, [0x0078]: NAME_ALG_AES256_GCM_IV12_TAG16, [0x0114]: NAME_ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256, [0x0146]: NAME_ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256, [0x0178]: NAME_ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256, [0x0214]: NAME_ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256, [0x0346]: NAME_ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, [0x0378]: NAME_ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384, ...CommittingAlgorithmSuiteIdentifier } = AlgorithmSuiteIdentifier;
    return CommittingAlgorithmSuiteIdentifier;
})();
exports.CommitmentPolicySuites = Object.freeze({
    isEncryptEnabled(commitmentPolicy, suite) {
        if (!suite)
            return;
        const id = suite.id || suite;
        const name = suite.name || AlgorithmSuiteIdentifier[id];
        /* Precondition: Only handle EncryptionMaterial for algorithm suites supported in commitmentPolicy. */
        needs_1.needs(this[commitmentPolicy].encryptEnabledSuites[id], `Configuration conflict. ` +
            `Cannot encrypt due to CommitmentPolicy ${commitmentPolicy} ` +
            `requiring only non-committed messages. ` +
            `Algorithm ID was ${name}. ` +
            `See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/troubleshooting-migration.html`);
    },
    isDecryptEnabled(commitmentPolicy, suite, messageId) {
        const id = suite.id || suite;
        const name = suite.name || AlgorithmSuiteIdentifier[id];
        /* Precondition: Only handle DecryptionMaterial for algorithm suites supported in commitmentPolicy. */
        needs_1.needs(this[commitmentPolicy].decryptEnabledSuites[id], `Configuration conflict. ` +
            `Cannot process message with ID ${messageId} ` +
            `due to CommitmentPolicy ${commitmentPolicy} ` +
            `requiring only committed messages. ` +
            `Algorithm ID was ${name}. ` +
            `See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/troubleshooting-migration.html`);
    },
    [CommitmentPolicy.FORBID_ENCRYPT_ALLOW_DECRYPT]: Object.freeze({
        encryptEnabledSuites: exports.NonCommittingAlgorithmSuiteIdentifier,
        decryptEnabledSuites: AlgorithmSuiteIdentifier,
        defaultAlgorithmSuite: exports.NonCommittingAlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384,
    }),
    // [CommitmentPolicy.REQUIRE_ENCRYPT_ALLOW_DECRYPT]: Object.freeze({
    //   encryptEnabledSuites: CommittingAlgorithmSuiteIdentifier,
    //   decryptEnabledSuites: AlgorithmSuiteIdentifier,
    //   defaultAlgorithmSuite:
    //     CommittingAlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384,
    // }),
    // [CommitmentPolicy.REQUIRE_ENCRYPT_REQUIRE_DECRYPT]: Object.freeze({
    //   encryptEnabledSuites: CommittingAlgorithmSuiteIdentifier,
    //   decryptEnabledSuites: CommittingAlgorithmSuiteIdentifier,
    //   defaultAlgorithmSuite:
    //     CommittingAlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384,
    // }),
});
var MessageFormat;
(function (MessageFormat) {
    MessageFormat[MessageFormat["V1"] = 1] = "V1";
    MessageFormat[MessageFormat["V2"] = 2] = "V2";
})(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));
Object.freeze(MessageFormat);
class AlgorithmSuite {
    constructor(suiteValues) {
        needs_1.needs(this.constructor !== AlgorithmSuite, 'new AlgorithmSuite is not allowed');
        /* Precondition: A algorithm suite specification must be passed. */
        needs_1.needs(suiteValues, 'Algorithm specification not set.');
        /* Precondition: The Algorithm Suite Identifier must exist. */
        needs_1.needs(AlgorithmSuiteIdentifier[suiteValues.id], 'No suite by that identifier exists.');
        Object.assign(this, suiteValues);
        immutable_class_1.readOnlyProperty(this, 'keyLengthBytes', this.keyLength / 8);
        immutable_class_1.readOnlyProperty(this, 'name', AlgorithmSuiteIdentifier[this.id]);
    }
}
exports.AlgorithmSuite = AlgorithmSuite;
immutable_class_1.immutableClass(AlgorithmSuite);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxnb3JpdGhtX3N1aXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hbGdvcml0aG1fc3VpdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7QUFFdEM7Ozs7Ozs7OztHQVNHO0FBRUgsdURBQW9FO0FBQ3BFLG1DQUErQjtBQUUvQjs7Ozs7R0FLRztBQUNILElBQVksd0JBWVg7QUFaRCxXQUFZLHdCQUF3QjtJQUNsQyxrSEFBb0MsQ0FBQTtJQUNwQyxrSEFBb0MsQ0FBQTtJQUNwQyxtSEFBb0MsQ0FBQTtJQUNwQywySUFBZ0QsQ0FBQTtJQUNoRCwySUFBZ0QsQ0FBQTtJQUNoRCwySUFBZ0QsQ0FBQTtJQUNoRCxpS0FBMkQsQ0FBQTtJQUMzRCxpS0FBMkQsQ0FBQTtJQUMzRCxpS0FBMkQsQ0FBQTtJQUMzRCxrS0FBMkQsQ0FBQTtJQUMzRCx3TEFBc0UsQ0FBQTtBQUN4RSxDQUFDLEVBWlcsd0JBQXdCLEdBQXhCLGdDQUF3QixLQUF4QixnQ0FBd0IsUUFZbkM7QUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUE7QUFFdkMsSUFBWSxnQkFJWDtBQUpELFdBQVksZ0JBQWdCO0lBQzFCLGlGQUErRCxDQUFBO0lBQy9ELHFFQUFxRTtJQUNyRSx5RUFBeUU7QUFDM0UsQ0FBQyxFQUpXLGdCQUFnQixHQUFoQix3QkFBZ0IsS0FBaEIsd0JBQWdCLFFBSTNCO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBRS9CLElBQVksZUFHWDtBQUhELFdBQVksZUFBZTtJQUN6Qiw4RUFBNkQsQ0FBQTtJQUM3RCxnRkFBK0QsQ0FBQTtBQUNqRSxDQUFDLEVBSFcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUFHMUI7QUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBNENqQixRQUFBLGtDQUFrQyxHQUFHLENBQUMs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