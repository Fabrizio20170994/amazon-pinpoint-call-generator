/// <reference types="node" />
import { NodeEncryptionMaterial, NodeDecryptionMaterial, AwsEsdkKeyObject } from '@aws-crypto/material-management';
import { Signer, Verify, createCipheriv, createDecipheriv } from 'crypto';
export interface AwsEsdkJsCipherGCM {
    update(data: Buffer): Buffer;
    final(): Buffer;
    getAuthTag(): Buffer;
    setAAD(aad: Buffer): this;
}
export interface AwsEsdkJsDecipherGCM {
    update(data: Buffer): Buffer;
    final(): Buffer;
    setAuthTag(buffer: Buffer): this;
    setAAD(aad: Buffer): this;
}
export interface GetCipher {
    (iv: Uint8Array): AwsEsdkJsCipherGCM;
}
/** @deprecated use GetCipherInfo */
export interface CurryGetCipher {
    (info?: Uint8Array): GetCipher;
}
export interface GetCipherInfo {
    (messageId: Uint8Array): {
        getCipher: GetCipher;
        keyCommitment?: Uint8Array;
    };
}
export interface GetSigner {
    (): Signer & {
        awsCryptoSign: () => Buffer;
    };
}
export interface NodeEncryptionMaterialHelper {
    /** @deprecated use getCipherInfo */
    kdfGetCipher: CurryGetCipher;
    getCipherInfo: GetCipherInfo;
    getSigner?: GetSigner;
    dispose: () => void;
}
export interface GetEncryptHelper {
    (material: NodeEncryptionMaterial): NodeEncryptionMaterialHelper;
}
export declare const getEncryptHelper: GetEncryptHelper;
export interface GetDecipher {
    (iv: Uint8Array): AwsEsdkJsDecipherGCM;
}
/** @deprecated use GetDecipherInfo */
export interface CurryGetDecipher {
    (info?: Uint8Array): GetDecipher;
}
export interface GetDecipherInfo {
    (messageId: Uint8Array, commitKey?: Uint8Array): GetDecipher;
}
export interface GetVerify {
    (): Verify & {
        awsCryptoVerify: (signature: Buffer) => boolean;
    };
}
export interface NodeDecryptionMaterialHelper {
    /** @deprecated use getDecipherInfo */
    kdfGetDecipher: CurryGetDecipher;
    getDecipherInfo: GetDecipherInfo;
    getVerify?: GetVerify;
    dispose: () => void;
}
export interface GetDecryptionHelper {
    (material: NodeDecryptionMaterial): NodeDecryptionMaterialHelper;
}
export declare const getDecryptionHelper: GetDecryptionHelper;
declare type CreateCryptoIvStream<Material extends NodeEncryptionMaterial | NodeDecryptionMaterial> = Material extends NodeEncryptionMaterial ? typeof createCipheriv : typeof createDecipheriv;
declare type CryptoStream<Material extends NodeEncryptionMaterial | NodeDecryptionMaterial> = Material extends NodeEncryptionMaterial ? AwsEsdkJsCipherGCM : AwsEsdkJsDecipherGCM;
declare type CreateCryptoStream<Material extends NodeEncryptionMaterial | NodeDecryptionMaterial> = (iv: Uint8Array) => CryptoStream<Material>;
declare type CurryHelper<Material extends NodeEncryptionMaterial | NodeDecryptionMaterial> = Material extends NodeEncryptionMaterial ? {
    getCipher: CreateCryptoStream<Material>;
    keyCommitment: Uint8Array;
} : Material extends NodeDecryptionMaterial ? CreateCryptoStream<Material> : never;
export declare function curryCryptoStream<Material extends NodeEncryptionMaterial | NodeDecryptionMaterial>(material: Material, createCryptoIvStream: CreateCryptoIvStream<Material>): (messageId: Uint8Array, commitKey?: Uint8Array | undefined) => CurryHelper<Material>;
export declare function nodeKdf(material: NodeEncryptionMaterial | NodeDecryptionMaterial, nonce: Uint8Array, commitKey?: Uint8Array): {
    derivedKey: Uint8Array | AwsEsdkKeyObject;
    keyCommitment?: Uint8Array;
};
/** @deprecated use curryCryptoStream */
export declare function getCryptoStream(material: NodeEncryptionMaterial | NodeDecryptionMaterial): (info: Uint8Array) => (iv: Uint8Array) => AwsEsdkJsCipherGCM | AwsEsdkJsDecipherGCM;
export {};
//# sourceMappingURL=material_helpers.d.ts.map