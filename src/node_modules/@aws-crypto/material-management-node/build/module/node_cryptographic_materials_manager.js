// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { NodeAlgorithmSuite, NodeEncryptionMaterial, NodeDecryptionMaterial, SignatureKey, needs, VerificationKey, immutableClass, readOnlyProperty, KeyringNode, CommitmentPolicySuites, AlgorithmSuiteIdentifier, } from '@aws-crypto/material-management';
import { ENCODED_SIGNER_KEY } from '@aws-crypto/serialize';
import { createECDH } from 'crypto';
/**
 * The NodeDefaultCryptographicMaterialsManager is a specific implementation of the CryptographicMaterialsManager.
 * New cryptography materials managers SHOULD extend from NodeMaterialsManager.
 * Users should never need to create an instance of a NodeDefaultCryptographicMaterialsManager.
 */
export class NodeDefaultCryptographicMaterialsManager {
    constructor(keyring) {
        /* Precondition: keyrings must be a KeyringNode. */
        needs(keyring instanceof KeyringNode, 'Unsupported type.');
        readOnlyProperty(this, 'keyring', keyring);
    }
    async getEncryptionMaterials({ suite, encryptionContext, commitmentPolicy, }) {
        suite =
            suite ||
                new NodeAlgorithmSuite(commitmentPolicy
                    ? CommitmentPolicySuites[commitmentPolicy].defaultAlgorithmSuite
                    : /** @deprecate remove fallback default. */
                        AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384);
        /* Precondition: NodeDefaultCryptographicMaterialsManager must reserve the ENCODED_SIGNER_KEY constant from @aws-crypto/serialize.
         * A CryptographicMaterialsManager can change entries to the encryptionContext
         * but changing these values has consequences.
         * The DefaultCryptographicMaterialsManager uses the value in the encryption context to store public signing key.
         * If the caller is using this value in their encryption context the Default CMM is probably not the CMM they want to use.
         */
        needs(!Object.prototype.hasOwnProperty.call(encryptionContext, ENCODED_SIGNER_KEY), `Reserved encryptionContext value ${ENCODED_SIGNER_KEY} not allowed.`);
        const material = await this.keyring.onEncrypt(this._initializeEncryptionMaterial(suite, encryptionContext));
        /* Postcondition: The NodeEncryptionMaterial must contain a valid dataKey.
         * This verifies that the data key matches the algorithm suite specification
         * and that the unencrypted data key is non-NULL.
         * See: cryptographic_materials.ts, `getUnencryptedDataKey`
         */
        needs(material.getUnencryptedDataKey(), 'Unencrypted data key is invalid.');
        /* Postcondition: The NodeEncryptionMaterial must contain at least 1 EncryptedDataKey. */
        needs(material.encryptedDataKeys.length, 'No EncryptedDataKeys: the ciphertext can never be decrypted.');
        return material;
    }
    async decryptMaterials({ suite, encryptedDataKeys, encryptionContext, }) {
        const material = await this.keyring.onDecrypt(this._initializeDecryptionMaterial(suite, encryptionContext), encryptedDataKeys.slice());
        /* Postcondition: The NodeDecryptionMaterial must contain a valid dataKey.
         * See: cryptographic_materials.ts, `getUnencryptedDataKey` also verifies
         * that the unencrypted data key has not been manipulated,
         * that the data key matches the algorithm suite specification
         * and that the unencrypted data key is non-NULL.
         */
        needs(material.getUnencryptedDataKey(), 'Unencrypted data key is invalid.');
        return material;
    }
    _initializeEncryptionMaterial(suite, encryptionContext) {
        const { signatureCurve: namedCurve } = suite;
        /* Check for early return (Postcondition): The algorithm suite specification must support a signatureCurve to generate a ECDH key. */
        if (!namedCurve)
            return new NodeEncryptionMaterial(suite, encryptionContext);
        const ecdh = createECDH(namedCurve);
        ecdh.generateKeys();
        // @ts-ignore I want a compressed buffer.
        const compressPoint = ecdh.getPublicKey(undefined, 'compressed');
        const privateKey = ecdh.getPrivateKey();
        const signatureKey = new SignatureKey(privateKey, new Uint8Array(compressPoint), suite);
        return new NodeEncryptionMaterial(suite, {
            ...encryptionContext,
            [ENCODED_SIGNER_KEY]: compressPoint.toString('base64'),
        }).setSignatureKey(signatureKey);
    }
    _initializeDecryptionMaterial(suite, encryptionContext) {
        const { signatureCurve: namedCurve } = suite;
        if (!namedCurve) {
            /* Precondition: NodeDefaultCryptographicMaterialsManager The context must not contain a public key for a non-signing algorithm suite. */
            needs(!Object.prototype.hasOwnProperty.call(encryptionContext, ENCODED_SIGNER_KEY), 'Encryption context contains public verification key for unsigned algorithm suite.');
            /* Check for early return (Postcondition): The algorithm suite specification must support a signatureCurve to load a signature key. */
            return new NodeDecryptionMaterial(suite, encryptionContext);
        }
        /* Precondition: NodeDefaultCryptographicMaterialsManager If the algorithm suite specification requires a signatureCurve a context must exist. */
        if (!encryptionContext)
            throw new Error('Encryption context does not contain required public key.');
        const { [ENCODED_SIGNER_KEY]: compressPoint } = encryptionContext;
        /* Precondition: NodeDefaultCryptographicMaterialsManager The context must contain the public key. */
        needs(compressPoint, 'Context does not contain required public key.');
        const publicKeyBytes = VerificationKey.decodeCompressPoint(Buffer.from(compressPoint, 'base64'), suite);
        return new NodeDecryptionMaterial(suite, encryptionContext).setVerificationKey(new VerificationKey(publicKeyBytes, suite));
    }
}
immutableClass(NodeDefaultCryptographicMaterialsManager);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9jcnlwdG9ncmFwaGljX21hdGVyaWFsc19tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vZGVfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBRXRDLE9BQU8sRUFLTCxrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLHNCQUFzQixFQUN0QixZQUFZLEVBQ1osS0FBSyxFQUNMLGVBQWUsRUFDZixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLFdBQVcsRUFHWCxzQkFBc0IsRUFDdEIsd0JBQXdCLEdBQ3pCLE1BQU0saUNBQWlDLENBQUE7QUFFeEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFFMUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQU9uQzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLHdDQUF3QztJQUduRCxZQUFZLE9BQW9CO1FBQzlCLG1EQUFtRDtRQUNuRCxLQUFLLENBQUMsT0FBTyxZQUFZLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO1FBQzFELGdCQUFnQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVELEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxFQUMzQixLQUFLLEVBQ0wsaUJBQWlCLEVBQ2pCLGdCQUFnQixHQUNNO1FBQ3RCLEtBQUs7WUFDSCxLQUFLO2dCQUNMLElBQUksa0JBQWtCLENBQ3BCLGdCQUFnQjtvQkFDZCxDQUFDLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxxQkFBcUI7b0JBQ2hFLENBQUMsQ0FBQywwQ0FBMEM7d0JBQzFDLHdCQUF3QixDQUFDLGdEQUFnRCxDQUM5RSxDQUFBO1FBRUg7Ozs7O1dBS0c7UUFDSCxLQUFLLENBQ0gsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ25DLGlCQUFpQixFQUNqQixrQkFBa0IsQ0FDbkIsRUFDRCxvQ0FBb0Msa0JBQWtCLGVBQWUsQ0FDdEUsQ0FBQTtRQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQzNDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FDN0QsQ0FBQTtRQUVEOzs7O1dBSUc7UUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsa0NBQWtDLENBQUMsQ0FBQTtRQUUzRSx5RkFBeUY7UUFDekYsS0FBSyxDQUNILFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQ2pDLDhEQUE4RCxDQUMvRCxDQUFBO1FBRUQsT0FBTyxRQUFRLENBQUE7SUFDakIsQ0FBQztJQUVELEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUNyQixLQUFLLEVBQ0wsaUJBQWlCLEVBQ2pCLGlCQUFpQixHQUNLO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQzNDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsRUFDNUQsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQzFCLENBQUE7UUFFRDs7Ozs7V0FLRztRQUNILEtBQUssQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFBO1FBRTNFLE9BQU8sUUFBUSxDQUFBO0lBQ2pCLENBQUM7SUFFRCw2QkFBNkIsQ0FDM0IsS0FBeUIsRUFDekIsaUJBQW9DO1FBRXBDLE1BQU0sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBRTVDLHFJQUFxSTtRQUNySSxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtRQUU1RSxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ25CLHlDQUF5QztRQUN6QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUNoRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDdkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQ25DLFVBQVUsRUFDVixJQUFJLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFDN0IsS0FBSyxDQUNOLENBQUE7UUFFRCxPQUFPLElBQUksc0JBQXNCLENBQUMsS0FBSyxFQUFFO1lBQ3ZDLEdBQUcsaUJBQWlCO1lBQ3BCLENBQUMsa0JBQWtCLENBQUMsRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztTQUN2RCxDQUFDLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ2xDLENBQUM7SUFFRCw2QkFBNkIsQ0FDM0IsS0FBeUIsRUFDekIsaUJBQW9DO1FBRXBDLE1BQU0sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBRTVDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZix5SUFBeUk7WUFDekksS0FBSyxDQUNILENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUNuQyxpQkFBaUIsRUFDakIsa0JBQWtCLENBQ25CLEVBQ0QsbUZBQW1GLENBQ3BGLENBQUE7WUFFRCxzSUFBc0k7WUFDdEksT0FBTyxJQUFJLHNCQUFzQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFBO1NBQzVEO1FBRUQsaUpBQWlKO1FBQ2pKLElBQUksQ0FBQyxpQkFBaUI7WUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FDYiwwREFBMEQsQ0FDM0QsQ0FBQTtRQUVILE1BQU0sRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsYUFBYSxFQUFFLEdBQUcsaUJBQWlCLENBQUE7UUFFakUscUdBQXFHO1FBQ3JHLEtBQUssQ0FBQyxhQUFhLEVBQUUsK0NBQStDLENBQUMsQ0FBQTtRQUVyRSxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsbUJBQW1CLENBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxFQUNwQyxLQUFLLENBQ04sQ0FBQTtRQUVELE9BQU8sSUFBSSxzQkFBc0IsQ0FDL0IsS0FBSyxFQUNMLGlCQUFpQixDQUNsQixDQUFDLGtCQUFrQixDQUFDLElBQUksZUFBZSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7Q0FDRjtBQUNELGNBQWMsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFBIn0=